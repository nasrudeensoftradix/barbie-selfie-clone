import React, { useCallback, useEffect, useState } from "react";
import { removeBackground } from "../api_helpers/axios";
import { useNavigate, useSearchParams } from "react-router-dom";
import { updateImage } from "../comman/index";
import { toast } from "react-hot-toast";
export default function Step1() {
  const navigate = useNavigate();

  //states
  const [activeType, setactiveType] = useState("position");
  const [state, setstate] = useState({
    segmentedPhoto: "",
    scaleFactor: 1,
    moveStep: 10,
    userOffsetX: 0,
    userOffsetY: 0,
    overlayImage: null,
    rotationDegrees: 0,
    barbieText: "This Barbie is",
    text: "a Star",
  });

  //Destructure states
  const { moveStep, scaleFactor, rotationDegrees, barbieText, text } = state;

  //Get params
  const [searchParams, setSearchParams] = useSearchParams();

  //on change handler
  const onChangeHandler = (e) => {
    const { name, value } = e.target;
    setstate((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  //hooks
  useEffect(() => {
    updateImage(searchParams.get("url"), state) // main function
      .then((res) => null)
      .catch((err) => console.log(err, "error"));
  }, [searchParams, state]);

  return (
    <div className="step3_container">
      <div className="left_side">
        <h1>Step3</h1>
        <div id="result-container">
          <canvas id="result-canvas" />
        </div>
      </div>
      <div className="right_side">
        <div className="top_content">
          <ul>
            <li
              className={`action_btn ${
                activeType == "position" ? "active" : ""
              }`}
              onClick={() => setactiveType("position")}
            >
              <svg
                viewBox="0 0 122 122"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  fillRule="evenodd"
                  clipRule="evenodd"
                  d="M59.8507 29.6085C60.4109 29.0289 61.3192 29.0289 61.8794 29.6085L71.0087 39.0523C71.5689 39.6318 71.5689 40.5714 71.0087 41.1509C70.4485 41.7304 69.5402 41.7304 68.98 41.1509L62.2996 34.2404V86.4334L68.98 79.5228C69.5402 78.9433 70.4485 78.9433 71.0087 79.5228C71.5689 80.1023 71.5689 81.0419 71.0087 81.6214L61.8794 91.0653C61.3192 91.6448 60.4109 91.6448 59.8507 91.0653L50.7215 81.6214C50.1613 81.0419 50.1613 80.1023 50.7215 79.5228C51.2817 78.9433 52.19 78.9433 52.7502 79.5228L59.4306 86.4334V34.2404L52.7502 41.1509C52.19 41.7304 51.2817 41.7304 50.7215 41.1509C50.1613 40.5714 50.1613 39.6318 50.7215 39.0523L59.8507 29.6085Z"
                  fill="white"
                />
                <path
                  d="M61.8794 29.6085L61.52 29.956L61.52 29.956L61.8794 29.6085ZM59.8507 29.6085L60.2102 29.956L60.2102 29.956L59.8507 29.6085ZM71.0087 39.0523L70.6492 39.3998L71.0087 39.0523ZM68.98 41.1509L69.3394 40.8034L68.98 41.1509ZM62.2996 34.2404L62.6591 33.8929C62.5175 33.7463 62.3011 33.7004 62.1122 33.7768C61.9233 33.8532 61.7996 34.0366 61.7996 34.2404H62.2996ZM62.2996 86.4334H61.7996C61.7996 86.6371 61.9233 86.8205 62.1122 86.8969C62.3011 86.9733 62.5175 86.9274 62.6591 86.7809L62.2996 86.4334ZM68.98 79.5228L68.6205 79.1753L68.6205 79.1753L68.98 79.5228ZM71.0087 79.5228L71.3682 79.1753L71.3682 79.1753L71.0087 79.5228ZM71.0087 81.6214L71.3682 81.969L71.3682 81.969L71.0087 81.6214ZM61.8794 91.0653L61.52 90.7178L61.52 90.7178L61.8794 91.0653ZM59.8507 91.0653L60.2102 90.7178L60.2102 90.7178L59.8507 91.0653ZM50.7215 81.6214L50.362 81.969L50.362 81.969L50.7215 81.6214ZM50.7215 79.5228L50.362 79.1753L50.362 79.1753L50.7215 79.5228ZM52.7502 79.5228L53.1097 79.1753L53.1097 79.1753L52.7502 79.5228ZM59.4306 86.4334L59.0711 86.7809C59.2127 86.9274 59.4291 86.9733 59.618 86.8969C59.8069 86.8205 59.9306 86.6371 59.9306 86.4334H59.4306ZM59.4306 34.2404H59.9306C59.9306 34.0366 59.8069 33.8532 59.618 33.7768C59.4291 33.7004 59.2127 33.7463 59.0711 33.8929L59.4306 34.2404ZM52.7502 41.1509L53.1097 41.4984L53.1097 41.4984L52.7502 41.1509ZM50.7215 39.0523L50.362 38.7048L50.362 38.7048L50.7215 39.0523ZM62.2389 29.261C61.4822 28.4781 60.248 28.4781 59.4912 29.261L60.2102 29.956C60.5739 29.5798 61.1563 29.5798 61.52 29.956L62.2389 29.261ZM71.3682 38.7048L62.2389 29.261L61.52 29.956L70.6492 39.3998L71.3682 38.7048ZM71.3682 41.4984C72.1157 40.7251 72.1157 39.4781 71.3682 38.7048L70.6492 39.3998C71.0221 39.7855 71.0221 40.4177 70.6492 40.8034L71.3682 41.4984ZM68.6205 41.4984C69.3772 42.2813 70.6114 42.2813 71.3682 41.4984L70.6492 40.8034C70.2855 41.1796 69.7031 41.1796 69.3394 40.8034L68.6205 41.4984ZM61.9401 34.5879L68.6205 41.4984L69.3394 40.8034L62.6591 33.8929L61.9401 34.5879ZM62.7996 86.4334V34.2404H61.7996V86.4334H62.7996ZM68.6205 79.1753L61.9401 86.0859L62.6591 86.7809L69.3394 79.8703L68.6205 79.1753ZM71.3682 79.1753C70.6114 78.3925 69.3772 78.3925 68.6205 79.1753L69.3394 79.8703C69.7031 79.4941 70.2855 79.4941 70.6492 79.8703L71.3682 79.1753ZM71.3682 81.969C72.1157 81.1956 72.1157 79.9486 71.3682 79.1753L70.6492 79.8703C71.0221 80.256 71.0221 80.8882 70.6492 81.2739L71.3682 81.969ZM62.2389 91.4128L71.3682 81.969L70.6492 81.2739L61.52 90.7178L62.2389 91.4128ZM59.4912 91.4128C60.248 92.1956 61.4822 92.1956 62.2389 91.4128L61.52 90.7178C61.1563 91.094 60.5739 91.094 60.2102 90.7178L59.4912 91.4128ZM50.362 81.969L59.4912 91.4128L60.2102 90.7178L51.081 81.2739L50.362 81.969ZM50.362 79.1753C49.6145 79.9486 49.6145 81.1956 50.362 81.969L51.081 81.2739C50.7081 80.8882 50.7081 80.256 51.081 79.8703L50.362 79.1753ZM53.1097 79.1753C52.353 78.3925 51.1188 78.3925 50.362 79.1753L51.081 79.8703C51.4447 79.4941 52.0271 79.4941 52.3907 79.8703L53.1097 79.1753ZM59.7901 86.0859L53.1097 79.1753L52.3907 79.8703L59.0711 86.7809L59.7901 86.0859ZM58.9306 34.2404V86.4334H59.9306V34.2404H58.9306ZM53.1097 41.4984L59.7901 34.5879L59.0711 33.8929L52.3907 40.8034L53.1097 41.4984ZM50.362 41.4984C51.1188 42.2813 52.353 42.2813 53.1097 41.4984L52.3907 40.8034C52.0271 41.1796 51.4447 41.1796 51.081 40.8034L50.362 41.4984ZM50.362 38.7048C49.6145 39.4781 49.6145 40.7251 50.362 41.4984L51.081 40.8034C50.7081 40.4177 50.7081 39.7855 51.081 39.3998L50.362 38.7048ZM59.4912 29.261L50.362 38.7048L51.081 39.3998L60.2102 29.956L59.4912 29.261Z"
                  fill="white"
                />
                <path
                  fillRule="evenodd"
                  clipRule="evenodd"
                  d="M29.6085 61.8794C29.029 61.3192 29.029 60.4109 29.6085 59.8507L39.0524 50.7214C39.6319 50.1612 40.5715 50.1612 41.151 50.7214C41.7305 51.2816 41.7305 52.1899 41.151 52.7501L34.2404 59.4305H86.4334L79.5229 52.7501C78.9434 52.1899 78.9434 51.2816 79.5229 50.7214C80.1024 50.1612 81.042 50.1612 81.6215 50.7214L91.0653 59.8507C91.6449 60.4109 91.6449 61.3192 91.0653 61.8794L81.6215 71.0086C81.042 71.5688 80.1024 71.5688 79.5229 71.0086C78.9434 70.4484 78.9434 69.5401 79.5229 68.9799L86.4334 62.2995H34.2404L41.151 68.9799C41.7305 69.5401 41.7305 70.4484 41.151 71.0086C40.5715 71.5688 39.6319 71.5688 39.0524 71.0086L29.6085 61.8794Z"
                  fill="white"
                />
                <path
                  d="M29.6085 59.8507L29.956 60.2101L29.956 60.2101L29.6085 59.8507ZM29.6085 61.8794L29.956 61.5199L29.956 61.5199L29.6085 61.8794ZM39.0524 50.7214L39.3999 51.0809L39.0524 50.7214ZM41.151 52.7501L40.8035 52.3907L41.151 52.7501ZM34.2404 59.4305L33.8929 59.071C33.7464 59.2126 33.7005 59.429 33.7769 59.6179C33.8533 59.8068 34.0367 59.9305 34.2404 59.9305V59.4305ZM86.4334 59.4305V59.9305C86.6372 59.9305 86.8206 59.8068 86.897 59.6179C86.9734 59.429 86.9275 59.2126 86.781 59.071L86.4334 59.4305ZM79.5229 52.7501L79.1754 53.1096L79.1754 53.1096L79.5229 52.7501ZM79.5229 50.7214L79.1754 50.3619L79.1754 50.3619L79.5229 50.7214ZM81.6215 50.7214L81.969 50.3619L81.969 50.3619L81.6215 50.7214ZM91.0653 59.8507L90.7178 60.2101L90.7178 60.2101L91.0653 59.8507ZM91.0653 61.8794L90.7178 61.5199L90.7178 61.5199L91.0653 61.8794ZM81.6215 71.0086L81.969 71.3681L81.969 71.3681L81.6215 71.0086ZM79.5229 71.0086L79.1754 71.3681L79.1754 71.3681L79.5229 71.0086ZM79.5229 68.9799L79.1754 68.6204L79.1754 68.6204L79.5229 68.9799ZM86.4334 62.2995L86.781 62.659C86.9275 62.5174 86.9734 62.301 86.897 62.1121C86.8206 61.9232 86.6372 61.7995 86.4334 61.7995V62.2995ZM34.2404 62.2995V61.7995C34.0367 61.7995 33.8533 61.9232 33.7769 62.1121C33.7005 62.301 33.7464 62.5174 33.8929 62.659L34.2404 62.2995ZM41.151 68.9799L41.4985 68.6204L41.4985 68.6204L41.151 68.9799ZM39.0524 71.0086L38.7048 71.3681L38.7048 71.3681L39.0524 71.0086ZM29.261 59.4912C28.4782 60.2479 28.4782 61.4821 29.261 62.2389L29.956 61.5199C29.5798 61.1562 29.5798 60.5738 29.956 60.2101L29.261 59.4912ZM38.7048 50.3619L29.261 59.4912L29.956 60.2101L39.3999 51.0809L38.7048 50.3619ZM41.4985 50.3619C40.7252 49.6144 39.4782 49.6144 38.7048 50.3619L39.3999 51.0809C39.7856 50.7081 40.4178 50.7081 40.8035 51.0809L41.4985 50.3619ZM41.4985 53.1096C42.2813 52.3529 42.2813 51.1187 41.4985 50.3619L40.8035 51.0809C41.1797 51.4446 41.1797 52.027 40.8035 52.3907L41.4985 53.1096ZM34.5879 59.79L41.4985 53.1096L40.8035 52.3907L33.8929 59.071L34.5879 59.79ZM86.4334 58.9305H34.2404V59.9305H86.4334V58.9305ZM79.1754 53.1096L86.0859 59.79L86.781 59.071L79.8704 52.3907L79.1754 53.1096ZM79.1754 50.3619C78.3925 51.1187 78.3925 52.3529 79.1754 53.1096L79.8704 52.3907C79.4942 52.027 79.4942 51.4446 79.8704 51.0809L79.1754 50.3619ZM81.969 50.3619C81.1957 49.6144 79.9487 49.6144 79.1754 50.3619L79.8704 51.0809C80.2561 50.7081 80.8883 50.7081 81.274 51.0809L81.969 50.3619ZM91.4128 59.4912L81.969 50.3619L81.274 51.0809L90.7178 60.2101L91.4128 59.4912ZM91.4128 62.2389C92.1957 61.4821 92.1957 60.2479 91.4128 59.4912L90.7178 60.2101C91.094 60.5738 91.094 61.1562 90.7178 61.5199L91.4128 62.2389ZM81.969 71.3681L91.4128 62.2389L90.7178 61.5199L81.274 70.6491L81.969 71.3681ZM79.1754 71.3681C79.9487 72.1156 81.1957 72.1156 81.969 71.3681L81.274 70.6491C80.8883 71.022 80.2561 71.022 79.8704 70.6491L79.1754 71.3681ZM79.1754 68.6204C78.3925 69.3771 78.3925 70.6113 79.1754 71.3681L79.8704 70.6491C79.4942 70.2854 79.4942 69.703 79.8704 69.3394L79.1754 68.6204ZM86.0859 61.94L79.1754 68.6204L79.8704 69.3394L86.781 62.659L86.0859 61.94ZM34.2404 62.7995H86.4334V61.7995H34.2404V62.7995ZM41.4985 68.6204L34.5879 61.94L33.8929 62.659L40.8035 69.3394L41.4985 68.6204ZM41.4985 71.3681C42.2813 70.6113 42.2813 69.3771 41.4985 68.6204L40.8035 69.3394C41.1797 69.703 41.1797 70.2854 40.8035 70.6491L41.4985 71.3681ZM38.7048 71.3681C39.4782 72.1156 40.7252 72.1156 41.4985 71.3681L40.8035 70.6491C40.4178 71.022 39.7856 71.022 39.3999 70.6491L38.7048 71.3681ZM29.261 62.2389L38.7048 71.3681L39.3999 70.6491L29.956 61.5199L29.261 62.2389Z"
                  fill="white"
                />
              </svg>
            </li>
            <li
              className={`action_btn ${
                activeType == "textEdit" ? "active" : ""
              }`}
              onClick={() => setactiveType("textEdit")}
            >
              <svg
                viewBox="0 0 122 122"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M35.1478 77.4323L47.6341 89.6837L80.6297 55.0219L68.1434 42.7705L35.1478 77.4323Z"
                  fill="white"
                />
                <path
                  d="M70.9457 39.8265L83.432 52.0778L91.1539 43.9659L78.6677 31.7145L70.9457 39.8265Z"
                  fill="white"
                />
                <path
                  d="M32.281 93.0039L37.2398 91.771L33.3266 87.9311L32.281 93.0039Z"
                  fill="white"
                />
                <path
                  d="M47.6341 89.6837L35.1478 77.4323M47.6341 89.6837L80.6297 55.0219L68.1434 42.7705L35.1478 77.4323M47.6341 89.6837L31.9407 93.4845L35.1478 77.4323M83.432 52.0778L70.9457 39.8265L78.6677 31.7145L91.1539 43.9659L83.432 52.0778ZM32.281 93.0039L37.2398 91.771L33.3266 87.9311L32.281 93.0039Z"
                  stroke="white"
                  strokeLinejoin="round"
                />
              </svg>
            </li>
            <li
              className={`action_btn ${activeType == "star" ? "active" : ""}`}
              onClick={() => setactiveType("star")}
            >
              <svg
                viewBox="0 0 122 122"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M61.0005 25.1953C39.7607 25.1953 22.5432 41.2226 22.5432 60.9939C22.5432 75.9615 33.2226 83.1241 43.918 82.8909C49.4803 82.8909 54.855 81.1411 60.3775 80.7302C61.1514 80.6731 61.9397 80.616 62.693 80.8555C63.4463 81.0951 64.1725 81.6804 64.492 82.5863C65.0275 84.1029 64.2552 85.8907 63.2476 86.9377C61.2277 89.0365 58.5626 89.2459 56.1422 90.0376C55.0139 90.4072 51.3079 91.4574 53.1672 94.021C53.4136 94.3605 53.7584 94.5493 54.0969 94.7158C63.4637 99.3386 75.3622 95.6661 83.9169 89.7441C91.1971 84.7041 97.6842 76.3375 99.1511 65.5294C99.3545 64.0318 99.4562 62.5136 99.4562 60.9939C99.4578 41.2226 82.2403 25.1953 61.0005 25.1953ZM40.4234 72.868C37.6883 73.9468 34.5957 72.6094 33.5151 69.8793C32.4344 67.1491 33.7741 64.062 36.5091 62.9832C39.2442 61.9045 42.3368 63.2418 43.4174 65.972C44.4981 68.7022 43.1584 71.7893 40.4234 72.868ZM45.102 49.9399C44.166 52.7224 41.1465 54.2216 38.359 53.2872C35.5715 52.3528 34.0697 49.3386 35.0057 46.5561C35.9418 43.7736 38.9613 42.2744 41.7488 43.2088C44.5362 44.1432 46.038 47.1573 45.102 49.9399ZM61.215 43.0105C58.3465 43.6546 55.497 41.854 54.8534 38.989C54.2082 36.1256 56.0119 33.2812 58.882 32.6387C61.7506 31.9946 64.6 33.7952 65.2437 36.6602C65.8889 39.5236 64.0851 42.368 61.215 43.0105ZM78.3308 50.1207C75.8548 48.5359 75.1349 45.2489 76.7209 42.7773C78.3086 40.3057 81.6014 39.5871 84.0774 41.1703C86.5534 42.7551 87.2733 46.0421 85.6873 48.5137C84.1012 50.9853 80.8068 51.7039 78.3308 50.1207ZM87.0953 70.7232C84.1759 71.0817 81.5204 69.0099 81.1612 66.0957C80.802 63.1815 82.8775 60.5306 85.7969 60.1721C88.7163 59.8136 91.3719 61.8854 91.731 64.7996C92.0902 67.7138 90.0147 70.3647 87.0953 70.7232Z"
                  fill="white"
                />
              </svg>
            </li>
          </ul>
        </div>
        <div className="reposition_container">
          {activeType == "position" &&
            positionComp(
              setstate,
              moveStep,
              onChangeHandler,
              scaleFactor,
              rotationDegrees
            )}
          {activeType == "textEdit" && (
            <div>
              <label>Barbie</label>
              <input
                type="text"
                value={barbieText}
                onChange={onChangeHandler}
                name="barbieText"
              />
              <label>ken</label>
              <input
                type="text"
                value={text}
                name="text"
                onChange={onChangeHandler}
              />
            </div>
          )}
          {activeType == "star" && (
            <div className="start_section">
              <h3>Choose a color.</h3>
              <div>
                <img
                  onClick={() =>
                    setstate((prev) => ({
                      ...prev,
                      overlayImage: "../assets/img/overlay2.png",
                    }))
                  }
                  src="../assets/img/overlay4.png"
                  width={80}
                />
                <img
                  onClick={() =>
                    setstate((prev) => ({
                      ...prev,
                      overlayImage: "../assets/img/overlay5.png",
                    }))
                  }
                  src="../assets/img/overlay5.png"
                  width={80}
                />
                <img
                  onClick={() =>
                    setstate((prev) => ({
                      ...prev,
                      overlayImage: "../assets/img/overlay3.png",
                    }))
                  }
                  src="../assets/img/overlay3.png"
                  width={80}
                />
              </div>
            </div>
          )}
        </div>
        <div className="bottom_section">
          <a
            id="download-button"
            href="#"
            download="result.jpg"
            style={{ display: "none" }}
          >
            <button className="download_button">Download</button>
          </a>
          <p className="go_back_btn " onClick={() => navigate("/step1")}>
            Go Back
          </p>
        </div>
      </div>
    </div>
  );
}

const positionComp = (
  setstate,
  moveStep,
  onChangeHandler,
  scaleFactor,
  rotationDegrees
) => {
  return (
    <>
      {" "}
      <h3>Reposition your selfie.</h3>
      <div class="arrow-buttons">
        <div id="arrow-buttons-container">
          <div id="arrow-up-container">
            <button
              id="arrow-up"
              className="arrow-button"
              onClick={() =>
                setstate((prev) => ({
                  ...prev,
                  userOffsetY: prev.userOffsetY - moveStep,
                }))
              }
            >
              <svg
                viewBox="0 0 52 52"
                // fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M24.5 37C24.5 37.8284 25.1716 38.5 26 38.5C26.8284 38.5 27.5 37.8284 27.5 37L24.5 37ZM27.0607 12.9393C26.4749 12.3536 25.5251 12.3536 24.9393 12.9393L15.3934 22.4853C14.8076 23.0711 14.8076 24.0208 15.3934 24.6066C15.9792 25.1924 16.9289 25.1924 17.5147 24.6066L26 16.1213L34.4853 24.6066C35.0711 25.1924 36.0208 25.1924 36.6066 24.6066C37.1924 24.0208 37.1924 23.0711 36.6066 22.4853L27.0607 12.9393ZM27.5 37L27.5 14L24.5 14L24.5 37L27.5 37Z"
                  fill="currentcolor"
                />
              </svg>
            </button>
          </div>
          <div id="arrow-middle-container">
            <button
              id="arrow-left"
              className="arrow-button"
              onClick={() =>
                setstate((prev) => ({
                  ...prev,
                  userOffsetX: prev.userOffsetX - moveStep,
                }))
              }
            >
              <svg
                viewBox="0 0 52 52"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M24.5 37C24.5 37.8284 25.1716 38.5 26 38.5C26.8284 38.5 27.5 37.8284 27.5 37L24.5 37ZM27.0607 12.9393C26.4749 12.3536 25.5251 12.3536 24.9393 12.9393L15.3934 22.4853C14.8076 23.0711 14.8076 24.0208 15.3934 24.6066C15.9792 25.1924 16.9289 25.1924 17.5147 24.6066L26 16.1213L34.4853 24.6066C35.0711 25.1924 36.0208 25.1924 36.6066 24.6066C37.1924 24.0208 37.1924 23.0711 36.6066 22.4853L27.0607 12.9393ZM27.5 37L27.5 14L24.5 14L24.5 37L27.5 37Z"
                  fill="currentcolor"
                />
              </svg>
            </button>
            <button
              id="arrow-down"
              className="arrow-button"
              onClick={() =>
                setstate((prev) => ({
                  ...prev,
                  userOffsetY: prev.userOffsetY + moveStep,
                }))
              }
            >
              <svg
                viewBox="0 0 52 52"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M24.5 37C24.5 37.8284 25.1716 38.5 26 38.5C26.8284 38.5 27.5 37.8284 27.5 37L24.5 37ZM27.0607 12.9393C26.4749 12.3536 25.5251 12.3536 24.9393 12.9393L15.3934 22.4853C14.8076 23.0711 14.8076 24.0208 15.3934 24.6066C15.9792 25.1924 16.9289 25.1924 17.5147 24.6066L26 16.1213L34.4853 24.6066C35.0711 25.1924 36.0208 25.1924 36.6066 24.6066C37.1924 24.0208 37.1924 23.0711 36.6066 22.4853L27.0607 12.9393ZM27.5 37L27.5 14L24.5 14L24.5 37L27.5 37Z"
                  fill="currentcolor"
                />
              </svg>
            </button>
            <button
              id="arrow-right"
              className="arrow-button"
              onClick={() =>
                setstate((prev) => ({
                  ...prev,
                  userOffsetX: prev.userOffsetX + moveStep,
                }))
              }
            >
              <svg
                viewBox="0 0 52 52"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M24.5 37C24.5 37.8284 25.1716 38.5 26 38.5C26.8284 38.5 27.5 37.8284 27.5 37L24.5 37ZM27.0607 12.9393C26.4749 12.3536 25.5251 12.3536 24.9393 12.9393L15.3934 22.4853C14.8076 23.0711 14.8076 24.0208 15.3934 24.6066C15.9792 25.1924 16.9289 25.1924 17.5147 24.6066L26 16.1213L34.4853 24.6066C35.0711 25.1924 36.0208 25.1924 36.6066 24.6066C37.1924 24.0208 37.1924 23.0711 36.6066 22.4853L27.0607 12.9393ZM27.5 37L27.5 14L24.5 14L24.5 37L27.5 37Z"
                  fill="currentcolor"
                />
              </svg>
            </button>
          </div>
        </div>
      </div>
      <div>
        <div className="scale_wraper">
          <button
            className="scale_down"
            onClick={() =>
              setstate((prev) => ({
                ...prev,
                scaleFactor: parseFloat(prev.scaleFactor - 0.01),
              }))
            }
          >
            -
          </button>
          <input
            type="range"
            id="scale-range"
            min="0.1"
            max={3}
            step="0.01"
            defaultValue={1}
            value={scaleFactor}
            name="scaleFactor"
            onChange={onChangeHandler}
          />{" "}
          <button
            className="scale_down"
            onClick={() =>
              setstate((prev) => ({
                ...prev,
                scaleFactor: parseFloat(prev.scaleFactor + 0.01),
              }))
            }
          >
            +
          </button>
        </div>
        <div className="rotate_wraper">
          <svg
            viewBox="0 0 27 24"
            fill="none"
            width={20}
            onClick={() =>
              setstate((prev) => ({
                ...prev,
                rotationDegrees: prev.rotationDegrees - 1,
              }))
            }
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M21.6001 11.7771C21.6001 6.42097 17.369 2.07837 12.1498 2.07837C6.93057 2.07837 2.7001 6.42097 2.7001 11.7771C2.7001 17.1332 6.93119 21.4758 12.1498 21.4758"
              stroke="#F300A3"
              strokeWidth="2.5"
              strokeMiterlimit={10}
              strokeLinecap="round"
            />
            <path
              d="M21.6001 11.777L16.2001 7.62036"
              stroke="#F300A3"
              strokeWidth="2.5"
              strokeMiterlimit={10}
              strokeLinecap="round"
            />
            <path
              d="M24.3 5.54224L21.6 11.7771"
              stroke="#F300A3"
              strokeWidth="2.5"
              strokeMiterlimit={10}
              strokeLinecap="round"
            />
          </svg>
          <input
            type="range"
            id="rotation-range"
            min="-180"
            max="180"
            step="1"
            value={rotationDegrees}
            name="rotationDegrees"
            onChange={onChangeHandler}
            defaultValue={1}
          />

          <svg
            viewBox="0 0 27 24"
            fill="none"
            className="right"
            width={20}
            onClick={() =>
              setstate((prev) => ({
                ...prev,
                rotationDegrees: prev.rotationDegrees + 1,
              }))
            }
            xmlns="http://www.w3.org/2000/svg"
          >
            <path
              d="M21.6001 11.7771C21.6001 6.42097 17.369 2.07837 12.1498 2.07837C6.93057 2.07837 2.7001 6.42097 2.7001 11.7771C2.7001 17.1332 6.93119 21.4758 12.1498 21.4758"
              stroke="#F300A3"
              strokeWidth="2.5"
              strokeMiterlimit={10}
              strokeLinecap="round"
            />
            <path
              d="M21.6001 11.777L16.2001 7.62036"
              stroke="#F300A3"
              strokeWidth="2.5"
              strokeMiterlimit={10}
              strokeLinecap="round"
            />
            <path
              d="M24.3 5.54224L21.6 11.7771"
              stroke="#F300A3"
              strokeWidth="2.5"
              strokeMiterlimit={10}
              strokeLinecap="round"
            />
          </svg>
        </div>
      </div>
    </>
  );
};
